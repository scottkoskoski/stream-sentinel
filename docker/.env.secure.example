# Stream-Sentinel Secure Configuration Template
# Copy this file to .env.secure and update with secure values
# Usage: docker-compose -f docker-compose.yml -f docker-compose.secure.yml --env-file .env.secure up -d

# =============================================================================
# REDIS SECURITY
# =============================================================================
REDIS_PASSWORD=your-secure-redis-password-here-min-32-chars

# =============================================================================
# POSTGRESQL SECURITY  
# =============================================================================
POSTGRES_PASSWORD=your-secure-postgres-password-here-min-32-chars

# =============================================================================
# CLICKHOUSE SECURITY
# =============================================================================
CLICKHOUSE_PASSWORD=your-secure-clickhouse-password-here-min-32-chars

# =============================================================================
# KAFKA UI AUTHENTICATION
# =============================================================================
KAFKA_UI_USERNAME=admin
KAFKA_UI_PASSWORD=your-secure-kafka-ui-password-here-min-32-chars

# =============================================================================
# SCHEMA REGISTRY AUTHENTICATION
# =============================================================================
SCHEMA_REGISTRY_USERNAME=schema-admin
SCHEMA_REGISTRY_PASSWORD=your-secure-schema-registry-password-here-min-32-chars

# =============================================================================
# SSL/TLS CERTIFICATE PASSWORDS
# =============================================================================
SSL_TRUSTSTORE_PASSWORD=your-truststore-password-here-min-16-chars
SSL_KEYSTORE_PASSWORD=your-keystore-password-here-min-16-chars
SSL_KEY_PASSWORD=your-ssl-key-password-here-min-16-chars

# =============================================================================
# SECURITY HARDENING OPTIONS
# =============================================================================

# Enable strict SSL/TLS validation
SSL_VERIFY_HOSTNAME=true
SSL_ENDPOINT_IDENTIFICATION=true

# Kafka SASL/SCRAM users and passwords
KAFKA_ADMIN_PASSWORD=your-kafka-admin-password-here-min-32-chars
KAFKA_PRODUCER_PASSWORD=your-kafka-producer-password-here-min-32-chars
KAFKA_CONSUMER_PASSWORD=your-kafka-consumer-password-here-min-32-chars

# Network security
NETWORK_ENCRYPTION=enabled
FIREWALL_RULES=strict

# =============================================================================
# PASSWORD GENERATION EXAMPLES
# =============================================================================
# Use these commands to generate secure passwords:
#
# For general passwords (32+ characters):
# openssl rand -base64 32
#
# For SSL certificate passwords (16+ characters):  
# openssl rand -base64 16
#
# For Kafka SASL passwords (recommended 32+ characters):
# openssl rand -base64 32 | tr -d "=+/" | cut -c1-32

# =============================================================================
# SECURITY CHECKLIST
# =============================================================================
# Before deploying:
# 
# [ ] All passwords are unique and meet minimum length requirements
# [ ] SSL certificates have been generated (run ./security/generate_certs.sh)
# [ ] Network firewall rules are configured for your environment
# [ ] Backup encryption keys are stored securely
# [ ] Access logs are configured and monitored
# [ ] Regular security updates are scheduled
# [ ] Incident response procedures are documented
#
# Production deployment checklist:
# [ ] Change all default passwords
# [ ] Enable audit logging for all services
# [ ] Configure network segmentation
# [ ] Set up monitoring for security events
# [ ] Test disaster recovery procedures
# [ ] Implement key rotation policies

# =============================================================================
# PERFORMANCE NOTES
# =============================================================================
# SSL/TLS encryption adds overhead:
# - CPU: ~5-10% additional usage for encryption
# - Memory: ~50-100MB additional per service
# - Latency: ~1-2ms additional per network hop
# - Throughput: ~95-98% of non-encrypted performance
#
# Monitor these metrics in production and adjust resources accordingly.